# Generated by Django 4.2.5 on 2024-10-17 10:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extra_values", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Camera",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "location_rtspsrc",
                    models.CharField(
                        default="rtsp://admin:admin@ip/profile2/media.smp",
                        max_length=50,
                    ),
                ),
                (
                    "out_rtsp_link",
                    models.CharField(
                        blank=True,
                        default="rtsp://10.0.10.35:8554/41",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "location_description",
                    models.CharField(default="V10 AS 01.01", max_length=50),
                ),
                ("framerate", models.IntegerField(default=16)),
                ("hlssink_width", models.IntegerField(default=1200)),
                ("hlssink_height", models.IntegerField(default=600)),
                ("video_width", models.IntegerField(default=1200)),
                ("video_height", models.IntegerField(default=600)),
                ("port", models.IntegerField(default=8554)),
                ("opencv_output_width", models.IntegerField(default=1200)),
                ("opencv_output_height", models.IntegerField(default=600)),
                ("user_id", models.CharField(blank=True, max_length=50, null=True)),
                ("user_pw", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "quality",
                    models.CharField(
                        choices=[("low", "Low"), ("high", "High")],
                        default="low",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "2. CAMERAS",
                "verbose_name_plural": "2. CAMERAS",
                "db_table": "cameras",
            },
        ),
        migrations.CreateModel(
            name="ModelDetect",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name_model",
                    models.CharField(
                        choices=[
                            ("skeleton", "Skeleton"),
                            ("guns", "Guns"),
                            ("bags", "Bags"),
                            ("face_hiding", "Face Hiding"),
                            ("human_fault", "Human Fault"),
                            ("siz", "Siz"),
                            ("bags_sev", "Bags Sev"),
                        ],
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("path", models.CharField(max_length=30, unique=True)),
                (
                    "description",
                    models.TextField(
                        blank=True, default="Модель для обнаружения", null=True
                    ),
                ),
                ("conf", models.FloatField(default=0.7)),
                (
                    "conf_keypoints",
                    models.FloatField(blank=True, default=0.7, null=True),
                ),
                ("imgsz", models.IntegerField(blank=True, default=640, null=True)),
                ("high_text", models.FloatField(blank=True, default=0.6, null=True)),
                ("size_points", models.IntegerField(blank=True, default=7, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("model_pose_yolo", "Model Pose Yolo"),
                            ("model_yolo", "Model Yolo"),
                            ("need_skeleton", "Need Skeleton"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "task",
                    models.CharField(
                        choices=[("pose", "Pose"), ("detect", "Detect")], max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "1. MODELS",
                "verbose_name_plural": "1. MODELS",
                "db_table": "models",
            },
        ),
        migrations.CreateModel(
            name="RoiConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "4. ROI",
                "verbose_name_plural": "4. ROI",
            },
        ),
        migrations.CreateModel(
            name="TelegramBotConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("token", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "3. TELEGRAM",
                "verbose_name_plural": "3. TELEGRAM",
                "db_table": "telegram_tokens",
            },
        ),
        migrations.CreateModel(
            name="TelegramChatId",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chat", models.BigIntegerField()),
                (
                    "config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chats_admin_ids",
                        to="admin_configurations.telegrambotconfiguration",
                    ),
                ),
            ],
            options={
                "db_table": "telegram_chat_ids",
            },
        ),
        migrations.CreateModel(
            name="ObjectClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name_object_class",
                    models.CharField(
                        choices=[
                            ("person", "Person"),
                            ("face", "Face"),
                            ("hands", "Hands"),
                            ("legs", "Legs"),
                            ("body", "Body"),
                            ("gun", "Gun"),
                            ("knife", "Knife"),
                            ("bag", "Bag"),
                            ("big_bag", "Big Bag"),
                            ("balaclava", "Balaclava"),
                            ("concealing_glasses", "Concealing Glasses"),
                            ("hand", "Hand"),
                            ("medicine_mask", "Medicine Mask"),
                            ("non_concealing_glasses", "Non Concealing Glasses"),
                            ("nothing", "Nothing"),
                            ("scarf", "Scarf"),
                            ("fall_down", "Fall Down"),
                            ("helmet", "Helmet"),
                            ("vest", "Vest"),
                            ("head", "Head"),
                            ("hands_up", "Hands Up"),
                            ("backpack", "Backpack"),
                            ("handbag", "Handbag"),
                            ("suitcase", "Suitcase"),
                        ],
                        max_length=200,
                        unique=True,
                    ),
                ),
                ("topic", models.CharField(max_length=50)),
                ("text_for_onvif", models.CharField(max_length=50)),
                ("text_for_telegram", models.CharField(max_length=50)),
                ("save_interval", models.IntegerField(default=5)),
                ("telegram_send_interval", models.IntegerField(default=5)),
                ("onvif_send_interval", models.IntegerField(default=5)),
                (
                    "color",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_classes",
                        to="extra_values.color",
                    ),
                ),
                (
                    "model_detect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_classes",
                        to="admin_configurations.modeldetect",
                    ),
                ),
            ],
            options={
                "verbose_name": "OBJECT CLASS",
                "verbose_name_plural": "OBJECT CLASS",
                "db_table": "object_classes",
            },
        ),
        migrations.AddField(
            model_name="modeldetect",
            name="colors",
            field=models.ManyToManyField(
                blank=True,
                related_name="models",
                through="admin_configurations.ObjectClass",
                to="extra_values.color",
            ),
        ),
        migrations.AddField(
            model_name="modeldetect",
            name="detect_classes",
            field=models.ManyToManyField(
                blank=True,
                db_table="model_descriptor_classes",
                related_name="models",
                to="extra_values.detectclasses",
            ),
        ),
        migrations.CreateModel(
            name="Configuration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("active", models.BooleanField(default=False)),
                ("level_debug", models.IntegerField(default="1")),
                ("logging_level", models.CharField(default="info", max_length=50)),
                ("time_live_client", models.IntegerField(default=360)),
                ("port_for_onvif", models.IntegerField(default=8080)),
                ("remake_pipeline", models.IntegerField(default=10)),
                (
                    "type_protocol",
                    models.CharField(
                        choices=[("rtsp_rts", "Rtsp Rts"), ("hls", "Hls")],
                        default="rtsp_rts",
                        max_length=50,
                    ),
                ),
                (
                    "type_protocol_for_stream",
                    models.CharField(
                        choices=[("TCP", "Tcp"), ("AUTO", "Auto")],
                        default="TCP",
                        max_length=50,
                    ),
                ),
                ("ip_server", models.CharField(default="10.0.10.35", max_length=50)),
                (
                    "device",
                    models.CharField(
                        choices=[("auto", "Auto"), ("cuda", "Cuda"), ("cpu", "Cpu")],
                        default="auto",
                        max_length=50,
                    ),
                ),
                ("fps", models.IntegerField(default=24)),
                ("port", models.IntegerField(default=8557)),
                ("image_width", models.IntegerField(default=1280)),
                ("image_height", models.IntegerField(default=720)),
                ("info_parameters_cameras", models.BooleanField(default=True)),
                ("draw_results_detect", models.BooleanField(default=True)),
                ("draw_results_texts", models.BooleanField(default=True)),
                ("draw_results_keypoints", models.BooleanField(default=False)),
                ("draw_rectangle_events", models.BooleanField(default=True)),
                ("start_rtsp_video_stream", models.BooleanField(default=True)),
                ("telegram_works", models.BooleanField(default=True)),
                ("onvif_works", models.BooleanField(default=True)),
                ("fight_works", models.BooleanField(default=True)),
                ("hands_up_works", models.BooleanField(default=True)),
                ("big_bag_works", models.BooleanField(default=True)),
                ("stray_dog_works", models.BooleanField(default=True)),
                ("big_bag_conf", models.FloatField(blank=True, default=0.6, null=True)),
                (
                    "big_bag_relative_person",
                    models.FloatField(blank=True, default=0.6, null=True),
                ),
                (
                    "big_bag_max_size",
                    models.IntegerField(blank=True, default=100, null=True),
                ),
                (
                    "hands_up_conf",
                    models.FloatField(blank=True, default=0.6, null=True),
                ),
                ("fight_conf", models.FloatField(blank=True, default=0.6, null=True)),
                (
                    "fight_max_dist",
                    models.IntegerField(blank=True, default=100, null=True),
                ),
                (
                    "stray_dog_conf",
                    models.FloatField(blank=True, default=0.6, null=True),
                ),
                (
                    "stray_dog_max_dist",
                    models.IntegerField(blank=True, default=100, null=True),
                ),
                (
                    "cameras_in_work",
                    models.ManyToManyField(
                        db_table="configurations_cameras",
                        related_name="configurations",
                        to="admin_configurations.camera",
                    ),
                ),
                (
                    "class_for_pass_round",
                    models.ManyToManyField(
                        related_name="rounds", to="admin_configurations.objectclass"
                    ),
                ),
                (
                    "telegram_bot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configurations",
                        to="admin_configurations.telegrambotconfiguration",
                    ),
                ),
                (
                    "video_files",
                    models.ManyToManyField(
                        blank=True,
                        related_name="configurations",
                        to="extra_values.namevideofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "4. CONFIGURATION",
                "verbose_name_plural": "4. CONFIGURATIONS",
                "db_table": "configurations",
            },
        ),
        migrations.AddField(
            model_name="camera",
            name="models",
            field=models.ManyToManyField(
                related_name="cameras", to="admin_configurations.modeldetect"
            ),
        ),
        migrations.AddField(
            model_name="camera",
            name="profiles",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cameras",
                to="extra_values.nameprofile",
            ),
        ),
        migrations.AddField(
            model_name="camera",
            name="roi",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="camera_rois",
                to="admin_configurations.roiconfiguration",
            ),
        ),
        migrations.AddConstraint(
            model_name="objectclass",
            constraint=models.UniqueConstraint(
                fields=("name_object_class",), name="unique_object_class_name"
            ),
        ),
    ]
